https://github.com/912-Chereji-Iulia/LFTC-UBB_sem5/tree/main/lab4

In order to represent PIF, I used a list of pairs containing the token and its position in the ST. The position is marked as a pair,
containing its actual position and the position on the list hashed at the place in the ST
For implementing the Scanner class, I used the ST, the PIF and I took 3 lists: 1 with all the separators, one with all the
operators and one with the reserved keywords.
I used 3 external functions that check if a specific token is a constant or an identifier, using regex, or a composed token.

isConst(token) : checks if a token is an integer or string constant
    ->input : the token to be checked
    -> output: True if it's an int or string constant or False otherwise

isIdentifier(token) : checks if the token is an identifier
    ->input : the token to be checked
    -> output: True if it's an identifier or False otherwise

The isComposedToken(t1, t2, t3) checks if the given tokens form one of the composed tokens defined:
    ->input: the 3 tokens to be checked
    ->output: True if they form it or false otherwise

The write_to_fileSt(fileName) method will write to a file the content of the ST and the method used to represent it
    ->input: the name of the file

The write_to_filePIF(fileName) method will write to a file the content of the PIF
    ->input: the name of the file

The readFromFile(fileName) method will read the lines from a specific file
    ->input: the name of the file
    ->output: a list containing all the lines from the given file

The isReservedToken(token) checks if the given token is an operator, separator or a reserved keyword.
    ->input: the token to be checked
    ->output: True if it's an operator/separator/reserved keyword or False otherwise

The scan(fileName) function parses the file given:
    -> input: the name of the file
    -> output: the ST, PIF and a message showing if it s a lexical error or not
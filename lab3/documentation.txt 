https://github.com/912-Chereji-Iulia/LFTC-UBB_sem5/tree/main/lab3

I created only one instance of the Symbol table, being unique for identifiers and constants. For its implementation, I created a
Hash Table, represented by a dictionary with the keys being the positions and the values being a list with all the symbols hashed on that position.
Then, for each symbol, the position in the ST will be the result of the hash function on the symbol.

The getSize() method will return the size of the hash table.
    ->input: nothing
    ->output: size of the hash table

The getSymbolOnPos(pos) will return the symbol on a given position, given as a parameter to the function.
    ->input: the position from which we want to get its symbols
    ->output: list of symbols on the wanted position

The hashFunction(symbol) method will compute the hash function, being the sum of the ascii codes of all the characters forming the symbol modulo the initial size of
the hash table, so that it fits in it.
    ->input: a symbol for which we want to compute the hash function
    ->output: the result of the computation of the hash function, which is a nr btw 0 and size -1

The addSymbolToHT(symbol) will check if the given symbol in the definition of the method is already in the hash table. If it is, we won't add it again.
Otherwise, we get its corresponding position using the getPositionInST method and append it top that list.
    ->input: symbol to be added to the hash table
    ->output: -1 if the symbol is already in the hash table or, otherwise, the position it is hashed to

The getPositionOfSymbol(symbol) will also check if the symbol exists. If it does, we return its position otherwise, if the list corresponding to that
position is empty, we return -1 (meaning that the symbol is not in the table)
    ->input: the symbol for which we want to obtain the position in the symbol table
    ->output: the position in the symbol table (nr btw 0 and size -1), if the symbol is in the hash table, or -1 otherwise
